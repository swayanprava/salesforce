name: Salesforce Deploy (Dev, Test)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
    paths:
      - "force-app/**"
  workflow_dispatch:

jobs:
  Deploy:
    name: Salesforce Deploy (Dev, Test)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event.review.state == 'approved'
    strategy:
      fail-fast: false
      matrix:
        sandbox: [Dev]
    environment: ${{matrix.sandbox}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Salesforce DX
        run: npm install --location=global sfdx-cli@${{secrets.SFDX_CLI_VERSION}}

      - name: Start Full Salesforce Deployment
        id: start-sf-fulldeploy
        uses: ./.github/actions/start-salesforce-deployment
        with:
          server-key: ${{secrets.SFDX_SERVER_KEY}}
          consumer-key: ${{secrets.SFDX_CONSUMER_KEY}}
          username: ${{secrets.SFDX_USER}}
          instance-url: ${{secrets.SFDX_INSTANCE_URL}}
          full-deploy: true

      - name: Monitor Salesforce Deployment
        run: sfdx force:mdapi:deploy:report --targetusername buildserver --jobid $( cat deploymentId ) --wait -1

      - name: Full Salesforce Deployment Report
        if: failure()
        run: sfdx force:mdapi:deploy:report --targetusername buildserver --jobid ${{steps.start-sf-fulldeploy.outputs.deployment-id}} --verbose

      - name: Cancel Handler
        if: ${{cancelled()}}
        run: sfdx force:mdapi:deploy:cancel --targetusername buildserver --jobid ${{steps.start-sf-fulldeploy.outputs.deployment-id}} --wait 2

  Approval:
    name: Approval
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Request Approval
        id: approval
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GIT_HUB_TOKEN }}
          script: |
            const { data: approvals } = await github.request('GET /repos/:owner/:repo/pulls/:pull_number/reviews', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const hasApproved = approvals.some(review => review.state === 'APPROVED');

            return { approved: hasApproved };
      - name: Check Approval Status
        run: echo Approval status ${{ steps.approval.outputs.approved }}
